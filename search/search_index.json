{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction I don't know what to write here, will eventually add some filler I guess.","title":"Introduction"},{"location":"#introduction","text":"I don't know what to write here, will eventually add some filler I guess.","title":"Introduction"},{"location":"commands/","text":"Commands A bot without commands is pretty useless I suppose. Example This is an example of a full-fledged command taking advantage of a large amount of various features. Take this as a neat teaser for what's to come. The annotations and docstrings matter @commands . guild_permissions ( 808030843078836254 , roles = { 891619545356308481 : True }) @commands . slash_command ( default_permissions = False ) async def transfer ( inter : disnake . ApplicationCommandInteraction , target : disnake . Member , item : str , amount : int = commands . Param ( 10 , gt = 0 , le = 100 ), source : disnake . Member = commands . Param ( lambda inter : inter . author ), reason : str = '' , ): \"\"\"Transfer an item from an inventory of a member to an inventory of another member Parameters ---------- target: The member which will recieve the item item: The item to transfer amount: The amount of items to transfer source: The member from which to take to item reason: The reason for this transfer \"\"\" await inter . response . send_message ( f \"Transfered { amount } x { item } from { source . mention } to { target . mention } \" ) if reason : await inter . followup . send ( reason ) @transfer . autocomplete ( \"item\" ) async def autocomplete_item ( inter : disnake . ApplicationCommandInteraction , option : str , * , target : disnake . Membe = None , ** kwargs : Any ): if target is None : return {} return { item [ \"name\" ]: item [ \"id\" ] for item in get_db_items ( target . id )}","title":"Commands"},{"location":"commands/#commands","text":"A bot without commands is pretty useless I suppose.","title":"Commands"},{"location":"commands/#example","text":"This is an example of a full-fledged command taking advantage of a large amount of various features. Take this as a neat teaser for what's to come. The annotations and docstrings matter @commands . guild_permissions ( 808030843078836254 , roles = { 891619545356308481 : True }) @commands . slash_command ( default_permissions = False ) async def transfer ( inter : disnake . ApplicationCommandInteraction , target : disnake . Member , item : str , amount : int = commands . Param ( 10 , gt = 0 , le = 100 ), source : disnake . Member = commands . Param ( lambda inter : inter . author ), reason : str = '' , ): \"\"\"Transfer an item from an inventory of a member to an inventory of another member Parameters ---------- target: The member which will recieve the item item: The item to transfer amount: The amount of items to transfer source: The member from which to take to item reason: The reason for this transfer \"\"\" await inter . response . send_message ( f \"Transfered { amount } x { item } from { source . mention } to { target . mention } \" ) if reason : await inter . followup . send ( reason ) @transfer . autocomplete ( \"item\" ) async def autocomplete_item ( inter : disnake . ApplicationCommandInteraction , option : str , * , target : disnake . Membe = None , ** kwargs : Any ): if target is None : return {} return { item [ \"name\" ]: item [ \"id\" ] for item in get_db_items ( target . id )}","title":"Example"},{"location":"commands/basic/","text":"Basics You can figure out. Ganbate ne!","title":"Basics"},{"location":"commands/basic/#basics","text":"You can figure out. Ganbate ne!","title":"Basics"},{"location":"guide/coding-your-bot/","text":"Coding Your Bot Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"Coding Your Bot"},{"location":"guide/coding-your-bot/#coding-your-bot","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"Coding Your Bot"},{"location":"guide/making-your-application/","text":"Creating Your Application The steps mentioned further in this markdown are essentially a copy of the steps mentioned in the docs . Therefore, you can follow the steps from either resource. Note If you have already made your bot application, you can skip this document and move on to coding-your-bot . Creating a Bot Account In order to work with the library and the Discord API in general, we must first create a Discord Bot account. Creating a Bot account is a pretty straightforward process. Make sure you\u2019re logged on to the Discord website . Navigate to the application page . Click on the New Application button. Give the application a name and click Create . Create a Bot User by navigating to the Bot tab and clicking Add Bot . Click Yes, do it! to continue. Make sure that Public Bot is ticked if you want others to invite your bot. You should also make sure that Require OAuth2 Code Grant is unchecked unless you are developing a service that needs it. If you\u2019re unsure, then leave it unchecked . Copy the token using the Copy button. This is not the Client Secret at the General Information page. Warning It should be worth noting that this token is essentially your bot\u2019s password. You should never share this with someone else. In doing so, someone can log in to your bot and do malicious things, such as leaving servers, ban all members inside a server, or pinging everyone maliciously. The possibilities are endless, so do not share this token. If you accidentally leaked your token, click the \u201cRegenerate\u201d button as soon as possible. This revokes your old token and re-generates a new one. Now you need to use the new token to login. And that\u2019s it. You now have a bot account and you can login with that token. Inviting Your Bot So, you've made the bot account, but it is not actually in any server. If you want to invite your bot you must create an invite URL for it. Make sure you\u2019re logged on to the Discord website . Navigate to the application page . Click on your bot\u2019s page. Go to the OAuth2 tab. Tick the bot checkbox under scopes . If you would like to integrate slash commands and other interactions into your bot, make sure to check the applications.commands scope as well. Tick the permissions required for your bot to function under Bot Permissions . Please be aware of the consequences of requiring your bot to have the Administrator permission. Bot owners must have 2FA enabled for certain actions and permissions when added in servers that have Server-Wide 2FA enabled. Check the 2FA support page for more information. Now the resulting URL can be used to add your bot to a server. Copy and paste the URL into your browser, choose a server to invite the bot to, and click Authorize . Note The person adding the bot needs \"Manage Server\" permissions to do so. If you want to generate this URL dynamically at run-time inside your bot and using the disnake.Permissions interface, you can use disnake.utils.oauth_url() .","title":"Creating Your Application"},{"location":"guide/making-your-application/#creating-your-application","text":"The steps mentioned further in this markdown are essentially a copy of the steps mentioned in the docs . Therefore, you can follow the steps from either resource. Note If you have already made your bot application, you can skip this document and move on to coding-your-bot .","title":"Creating Your Application"},{"location":"guide/making-your-application/#creating-a-bot-account","text":"In order to work with the library and the Discord API in general, we must first create a Discord Bot account. Creating a Bot account is a pretty straightforward process. Make sure you\u2019re logged on to the Discord website . Navigate to the application page . Click on the New Application button. Give the application a name and click Create . Create a Bot User by navigating to the Bot tab and clicking Add Bot . Click Yes, do it! to continue. Make sure that Public Bot is ticked if you want others to invite your bot. You should also make sure that Require OAuth2 Code Grant is unchecked unless you are developing a service that needs it. If you\u2019re unsure, then leave it unchecked . Copy the token using the Copy button. This is not the Client Secret at the General Information page. Warning It should be worth noting that this token is essentially your bot\u2019s password. You should never share this with someone else. In doing so, someone can log in to your bot and do malicious things, such as leaving servers, ban all members inside a server, or pinging everyone maliciously. The possibilities are endless, so do not share this token. If you accidentally leaked your token, click the \u201cRegenerate\u201d button as soon as possible. This revokes your old token and re-generates a new one. Now you need to use the new token to login. And that\u2019s it. You now have a bot account and you can login with that token.","title":"Creating a Bot Account"},{"location":"guide/making-your-application/#inviting-your-bot","text":"So, you've made the bot account, but it is not actually in any server. If you want to invite your bot you must create an invite URL for it. Make sure you\u2019re logged on to the Discord website . Navigate to the application page . Click on your bot\u2019s page. Go to the OAuth2 tab. Tick the bot checkbox under scopes . If you would like to integrate slash commands and other interactions into your bot, make sure to check the applications.commands scope as well. Tick the permissions required for your bot to function under Bot Permissions . Please be aware of the consequences of requiring your bot to have the Administrator permission. Bot owners must have 2FA enabled for certain actions and permissions when added in servers that have Server-Wide 2FA enabled. Check the 2FA support page for more information. Now the resulting URL can be used to add your bot to a server. Copy and paste the URL into your browser, choose a server to invite the bot to, and click Authorize . Note The person adding the bot needs \"Manage Server\" permissions to do so. If you want to generate this URL dynamically at run-time inside your bot and using the disnake.Permissions interface, you can use disnake.utils.oauth_url() .","title":"Inviting Your Bot"}]}